
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}


enum UserRole {
  ADMIN 
  USER
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  role          UserRole    @default(USER)
  password      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  sessions      Session[]
  orders        Order[]

}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken  String      @unique
  userId        String
  expires       DateTime
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
 


model VerificationToken{
  id        String      @id @default(cuid())
  email     String
  token     String      @unique
  expires   DateTime

  @@unique([email, token])

}
model PasswordResetToken{
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime

  @@unique([email, token])

}

model Product {
  id                      String      @id @default(uuid())
  name                    String
  description             String
  priceInCents            Int
  images                  Json[]
  isAvailableForPurchase  Boolean     @default(true)
  color                   String
  size                    String
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt


  orders                  Order[]
  // downloadVerifications  DownloadVerification[]
  discountCodes          DiscountCode[]
}

model Order {
  id                String    @id @default(uuid())
  pricePaidInCents  Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String
  // productId         String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products           Product[]
  // product           Product   @relation(fields: [productId], references: [id], onDelete: Restrict)
  discountCodeId String?
  discountCode   DiscountCode? @relation(fields: [discountCodeId], references: [id], onDelete: Restrict)
}

model DiscountCode {
  id             String           @id @default(uuid())
  code           String           @unique
  discountAmount Int
  discountType   String
  uses           Int              @default(0)
  isActive       Boolean          @default(true)
  allProducts    Boolean          @default(false)
  createdAt      DateTime         @default(now())
  limit          Int?
  expiresAt      DateTime?

  products Product[]
  orders   Order[]
}

